generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(cuid())
  email      String     @unique
  name       String
  role       Role       @default(SECRETARY)
  password   String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  activities Activity[]
}

model Student {
  id            String            @id @default(cuid())
  fullName      String
  dateOfBirth   DateTime
  address       String
  gender        Gender
  phoneNumber   String
  email         String?
  guardianName  String
  guardianPhone String
  guardianEmail String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  classes       ClassEnrollment[]
  payments      Payment[]
}

model Class {
  id                       String            @id @default(cuid())
  name                     String
  description              String?
  startDate                DateTime          @default(now())
  endDate                  DateTime
  firstInstalmentDeadLine  DateTime
  secondInstalmentDeadLine DateTime
  capacity                 Int
  teacher                  String
  totalFee                 Float
  registrationFee          Float
  firstInstallmentFee      Float
  secondInstallmentFee     Float
  createdAt                DateTime          @default(now())
  updatedAt                DateTime          @updatedAt
  students                 ClassEnrollment[]
  payments                 Payment[]
}

model ClassEnrollment {
  id                       String    @id @default(cuid())
  studentId                String
  classId                  String
  enrolledAt               DateTime  @default(now())
  startDate                DateTime
  endDate                  DateTime?
  firstInstalmentDeadLine  DateTime?
  secondInstalmentDeadLine DateTime?
  class                    Class     @relation(fields: [classId], references: [id])
  student                  Student   @relation(fields: [studentId], references: [id])

  @@unique([studentId, classId])
}

model Payment {
  id          String        @id @default(cuid())
  amount      Float
  method      PaymentMethod
  type        PaymentType
  description String?
  studentId   String
  classId     String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  activity    Activity?
  class       Class         @relation(fields: [classId], references: [id])
  student     Student       @relation(fields: [studentId], references: [id])
}

model Activity {
  id           String       @id @default(cuid())
  action       String
  description  String?
  userId       String
  studentId    String?
  classId      String?
  paymentId    String?      @unique
  activityType ActivityType
  createdAt    DateTime     @default(now())
  payment      Payment?     @relation(fields: [paymentId], references: [id])
  performedBy  User         @relation(fields: [userId], references: [id])
}

enum Role {
  ADMIN
  SECRETARY
  TEACHER
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  BANK_TRANSFER
  CHECK
  OM
  MOMO
}

enum PaymentType {
  REGISTRATION
  FIRST_INSTALLMENT
  SECOND_INSTALLMENT
  OTHER
}

enum ActivityType {
  STUDENT_REGISTRATION
  CLASS_CREATION
  PAYMENT_RECEIVED
  STUDENT_ENROLLED
  USER_CREATED
  OTHER
}

enum Gender {
  MALE
  FEMALE
  OTHER
}
